version: '3'

services:
  apache:
    container_name: apache
    image: pkoenig10/httpd-openidc
    environment:
      TZ: $TZ
      DOMAIN: $DOMAIN
      PASSPHRASE: $PASSPHRASE
      CLIENT_ID: $CLIENT_ID
      CLIENT_SECRET: $CLIENT_SECRET
      USERS: $USERS
    hostname: &hostname $HOSTNAME
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./apache/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro
      - ./apache/httpd-ssl.conf:/usr/local/apache2/conf/extra/httpd-ssl.conf:ro
      - ./apache/httpd-vhosts.conf:/usr/local/apache2/conf/extra/httpd-vhosts.conf:ro
      - letsencrypt:/usr/local/apache2/conf/letsencrypt:ro

  netdata:
    container_name: netdata
    build: ./netdata
    environment:
      TZ: $TZ
    hostname: *hostname
    privileged: true
    restart: unless-stopped
    volumes:
      - /data:/data
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev/shm/fakenet:/host/proc/net:ro
      - ./netdata/netdata.conf:/etc/netdata/netdata.conf:ro
      - ./netdata/apps_groups.conf:/etc/netdata/apps_groups.conf:ro
      - ./netdata/fping.conf:/etc/netdata/fping.conf:ro
      - ./netdata/apache.conf:/etc/netdata/python.d/apache.conf:ro

  fakenet:
    container_name: fakenet
    image: pkoenig10/fakenet
    network_mode: host
    restart: unless-stopped
    volumes:
      - /dev/shm/fakenet:/dev/shm/fakenet

  plex:
    container_name: plex
    image: plexinc/pms-docker:plexpass
    environment:
      TZ: $TZ
      PLEX_UID: $UID
      PLEX_GID: $GID
    hostname: *hostname
    restart: unless-stopped
    ports:
      - 32400:32400
    volumes:
      - ./downloads:/data

  plexpy:
    container_name: plexpy
    image: linuxserver/plexpy
    environment: &environment-linuxserver
      TZ: $TZ
      PUID: $UID
      PGID: $GID
    hostname: *hostname
    restart: unless-stopped

  radarr:
    container_name: radarr
    image: linuxserver/radarr
    environment: *environment-linuxserver
    hostname: *hostname
    restart: unless-stopped
    volumes:
      - ./downloads:/downloads

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr
    environment: *environment-linuxserver
    hostname: *hostname
    restart: unless-stopped
    volumes:
      - ./downloads:/downloads

  transmission:
    container_name: transmission
    image: linuxserver/transmission
    environment: *environment-linuxserver
    hostname: *hostname
    restart: unless-stopped
    volumes:
      - ./transmission-web:/usr/share/transmission/web:ro
      - ./downloads:/downloads

  watchtower:
    container_name: watchtower
    image: v2tec/watchtower
    command: >
      --schedule "0 0 4 * * *"
      --cleanup
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro

volumes:
  letsencrypt:
    external: true
